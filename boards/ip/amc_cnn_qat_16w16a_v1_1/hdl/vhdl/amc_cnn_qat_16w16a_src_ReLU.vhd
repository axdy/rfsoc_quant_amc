-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/model_qat_2x2_w16a16/amc_cnn_qat_16w16a_src_ReLU.vhd
-- Created: 2025-02-27 17:51:51
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: amc_cnn_qat_16w16a_src_ReLU
-- Source Path: model_qat_2x2_w16a16/DUT HDL/Conv Layer 1/ReLU
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.amc_cnn_qat_16w16a_src_DUT_HDL_pkg.ALL;

ENTITY amc_cnn_qat_16w16a_src_ReLU IS
  PORT( in_rsvd                           :   IN    vector_of_std_logic_vector34(0 TO 63);  -- sfix34_En28 [64]
        out_rsvd                          :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En14 [64]
        );
END amc_cnn_qat_16w16a_src_ReLU;


ARCHITECTURE rtl OF amc_cnn_qat_16w16a_src_ReLU IS

  -- Signals
  SIGNAL in_signed                        : vector_of_signed34(0 TO 63);  -- sfix34_En28 [64]
  SIGNAL out_tmp                          : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]

BEGIN
  outputgen1: FOR k1 IN 0 TO 63 GENERATE
    in_signed(k1) <= signed(in_rsvd(k1));
  END GENERATE;

  ReLU_output : PROCESS (in_signed)
    VARIABLE hfi : vector_of_signed16(0 TO 63);
    VARIABLE ex : signed(15 DOWNTO 0);
    VARIABLE relu1 : vector_of_signed16(0 TO 63);
  BEGIN
    ex := to_signed(16#0000#, 16);
    -- Perform the ReLU activation function. 
    --     relu = max(fi(0,in.numerictype),in);
    --     clip = fi(relu,1,2,1);
    --     clip = fi(relu,1,2,1);https://github.com/axdy/rfsoc_quant_amc

    FOR k IN 0 TO 63 LOOP
      IF ((in_signed(k)(33) = '0') AND (in_signed(k)(32 DOWNTO 29) /= "0000")) OR ((in_signed(k)(33) = '0') AND (in_signed(k)(29 DOWNTO 14) = X"7FFF")) THEN 
        hfi(k) := X"7FFF";
      ELSIF (in_signed(k)(33) = '1') AND (in_signed(k)(32 DOWNTO 29) /= "1111") THEN 
        hfi(k) := X"8000";
      ELSE 
        hfi(k) := in_signed(k)(29 DOWNTO 14) + ('0' & in_signed(k)(13));
      END IF;
      IF to_signed(16#0000#, 16) < hfi(k) THEN 
        ex := hfi(k);
      ELSE 
        ex := to_signed(16#0000#, 16);
      END IF;
      relu1(k) := ex;
      out_tmp(k) <= relu1(k);
    END LOOP;

  END PROCESS ReLU_output;


  outputgen: FOR k1 IN 0 TO 63 GENERATE
    out_rsvd(k1) <= std_logic_vector(out_tmp(k1));
  END GENERATE;

END rtl;

